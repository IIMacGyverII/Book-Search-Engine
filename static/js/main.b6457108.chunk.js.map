{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","useMutation","saveBook","handleSaveBook","bookToSave","find","log","Auth","loggedIn","profileData","getProfile","userId","data","_id","variables","link","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","userData","useQuery","spread","user","username","removeBook","handleDeleteBook","savedBooks","SignupForm","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6457108.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","// imported from act 26 unit-21\nimport { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\n  mutation saveBook(\n    $userId: ID!\n    $authors: [String]\n    $description: String\n    $bookId: String\n    $image: String\n    $link: String\n    $title: String\n  ) {\n    saveBook(\n      userId: $userId\n      authors: $authors\n      description: $description\n      bookId: $bookId\n      image: $image\n      link: $link\n      title: $title\n    ) {\n      _id\n      username\n      savedBooks {\n        _id\n        authors\n        description\n        bookId\n        image\n        link\n        title\n      }\n    }\n  }\n`;\n\nexport const REMOVE_BOOK = gql`\n  mutation removeBook($userId: ID!, $bookId: ID!) {\n    removeBook(userId: $userId, bookId: $bookId) {\n      _id\n      username\n      savedBooks {\n        _id\n        authors\n        description\n        bookId\n        image\n        link\n        title\n      }\n    }\n  }\n`;","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport {searchGoogleBooks} from \"../utils/API\";\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      const {items} = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || [\"No author to display\"],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const [saveBook, {error}] = useMutation(SAVE_BOOK);\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\nconsole.log(bookToSave);\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    const profileData = Auth.getProfile();\n    const userId = profileData.data._id;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await saveBook({\n        variables: {userId: userId, authors: bookToSave.authors, description: bookToSave.description, bookId: bookToSave.bookId, image: bookToSave.image, link: bookToSave.link, title: bookToSave.title}\n      });\n\n    \n\n      // if book successfully saves to user's account, save book id to state\n       setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : \"Search for a book to begin\"}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )\n                        ? \"This book has already been saved!\"\n                        : \"Save this Book!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","// imported from act 26 unit-21   \nimport {gql} from \"@apollo/client\";\n\nexport const GET_ME = gql`\n  query me($userId: ID!) {\n    user(userId: $userId) {\n      _id\n      username\n      email\n      savedBooks {\n        _id\n        authors\n        description\n        bookId\n        image\n        link\n        title\n      }\n    }\n  }\n`;","import React, {useState} from \"react\";\nimport {Jumbotron, Container, CardColumns, Card, Button} from \"react-bootstrap\";\nimport {useQuery, useMutation} from \"@apollo/client\";\nimport {GET_ME} from \"../utils/queries\";\nimport {REMOVE_BOOK} from \"../utils/mutations\";\n\nimport Auth from \"../utils/auth\";\nimport {removeBookId} from \"../utils/localStorage\";\n\nconst SavedBooks = () => {\n  const profileData = Auth.getProfile();\n  const userId = profileData.data._id;\n  console.log(userId);\n\n  const userData = useQuery(GET_ME, {variables: {userId: userId}});\n  console.log(userData);\n  const data = userData.data || [];\n  const spread = {...data.user};\n\n  console.log(spread.username);\n  const [removeBook, {error}] = useMutation(REMOVE_BOOK);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await removeBook({\n        variables: {userId: userId, bookId: bookId},\n      });\n\n      // if (!response.ok) {\n      //   throw new Error(\"something went wrong!\");\n      // }\n      console.log(response);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!spread.username) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {spread.savedBooks.length\n            ? `Viewing ${spread.savedBooks.length} saved ${\n                spread.savedBooks.length === 1 ? \"book\" : \"books\"\n              }:`\n            : \"You have no saved books!\"}\n        </h2>\n        <CardColumns>\n          {spread.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [addUser, { error, data }] = useMutation(ADD_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData }\n      });\n\n      Auth.login(data.login.token);\n\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n      <>\n        <Navbar />\n        <Routes>\n          <Route \n            path='/' \n            element={<SearchBooks />} \n          />\n          <Route \n            path='/saved' \n            element={<SavedBooks />} \n          />\n          <Route \n            path='*'\n            element={<h1 className='display-2'>Wrong page!</h1>}\n          />\n        </Routes>\n      </>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}